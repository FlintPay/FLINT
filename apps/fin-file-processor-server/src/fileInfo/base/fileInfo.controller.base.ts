/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FileInfoService } from "../fileInfo.service";
import { FileInfoCreateInput } from "./FileInfoCreateInput";
import { FileInfo } from "./FileInfo";
import { FileInfoFindManyArgs } from "./FileInfoFindManyArgs";
import { FileInfoWhereUniqueInput } from "./FileInfoWhereUniqueInput";
import { FileInfoUpdateInput } from "./FileInfoUpdateInput";
import { CryptoInfoFindManyArgs } from "../../cryptoInfo/base/CryptoInfoFindManyArgs";
import { CryptoInfo } from "../../cryptoInfo/base/CryptoInfo";
import { CryptoInfoWhereUniqueInput } from "../../cryptoInfo/base/CryptoInfoWhereUniqueInput";
import { FileContentFindManyArgs } from "../../fileContent/base/FileContentFindManyArgs";
import { FileContent } from "../../fileContent/base/FileContent";
import { FileContentWhereUniqueInput } from "../../fileContent/base/FileContentWhereUniqueInput";

export class FileInfoControllerBase {
  constructor(protected readonly service: FileInfoService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FileInfo })
  async createFileInfo(
    @common.Body() data: FileInfoCreateInput
  ): Promise<FileInfo> {
    return await this.service.createFileInfo({
      data: data,
      select: {
        createdAt: true,
        fileName: true,
        fileSize: true,
        id: true,
        updatedAt: true,
        uploadDate: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FileInfo] })
  @ApiNestedQuery(FileInfoFindManyArgs)
  async fileInfos(@common.Req() request: Request): Promise<FileInfo[]> {
    const args = plainToClass(FileInfoFindManyArgs, request.query);
    return this.service.fileInfos({
      ...args,
      select: {
        createdAt: true,
        fileName: true,
        fileSize: true,
        id: true,
        updatedAt: true,
        uploadDate: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FileInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async fileInfo(
    @common.Param() params: FileInfoWhereUniqueInput
  ): Promise<FileInfo | null> {
    const result = await this.service.fileInfo({
      where: params,
      select: {
        createdAt: true,
        fileName: true,
        fileSize: true,
        id: true,
        updatedAt: true,
        uploadDate: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FileInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFileInfo(
    @common.Param() params: FileInfoWhereUniqueInput,
    @common.Body() data: FileInfoUpdateInput
  ): Promise<FileInfo | null> {
    try {
      return await this.service.updateFileInfo({
        where: params,
        data: data,
        select: {
          createdAt: true,
          fileName: true,
          fileSize: true,
          id: true,
          updatedAt: true,
          uploadDate: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FileInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFileInfo(
    @common.Param() params: FileInfoWhereUniqueInput
  ): Promise<FileInfo | null> {
    try {
      return await this.service.deleteFileInfo({
        where: params,
        select: {
          createdAt: true,
          fileName: true,
          fileSize: true,
          id: true,
          updatedAt: true,
          uploadDate: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/cryptoInfos")
  @ApiNestedQuery(CryptoInfoFindManyArgs)
  async findCryptoInfos(
    @common.Req() request: Request,
    @common.Param() params: FileInfoWhereUniqueInput
  ): Promise<CryptoInfo[]> {
    const query = plainToClass(CryptoInfoFindManyArgs, request.query);
    const results = await this.service.findCryptoInfos(params.id, {
      ...query,
      select: {
        createdAt: true,
        encryptionType: true,

        fileInfo: {
          select: {
            id: true,
          },
        },

        id: true,
        isEncrypted: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/cryptoInfos")
  async connectCryptoInfos(
    @common.Param() params: FileInfoWhereUniqueInput,
    @common.Body() body: CryptoInfoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cryptoInfos: {
        connect: body,
      },
    };
    await this.service.updateFileInfo({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/cryptoInfos")
  async updateCryptoInfos(
    @common.Param() params: FileInfoWhereUniqueInput,
    @common.Body() body: CryptoInfoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cryptoInfos: {
        set: body,
      },
    };
    await this.service.updateFileInfo({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/cryptoInfos")
  async disconnectCryptoInfos(
    @common.Param() params: FileInfoWhereUniqueInput,
    @common.Body() body: CryptoInfoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cryptoInfos: {
        disconnect: body,
      },
    };
    await this.service.updateFileInfo({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/fileContents")
  @ApiNestedQuery(FileContentFindManyArgs)
  async findFileContents(
    @common.Req() request: Request,
    @common.Param() params: FileInfoWhereUniqueInput
  ): Promise<FileContent[]> {
    const query = plainToClass(FileContentFindManyArgs, request.query);
    const results = await this.service.findFileContents(params.id, {
      ...query,
      select: {
        contentJson: true,
        createdAt: true,

        fileInfo: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/fileContents")
  async connectFileContents(
    @common.Param() params: FileInfoWhereUniqueInput,
    @common.Body() body: FileContentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fileContents: {
        connect: body,
      },
    };
    await this.service.updateFileInfo({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/fileContents")
  async updateFileContents(
    @common.Param() params: FileInfoWhereUniqueInput,
    @common.Body() body: FileContentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fileContents: {
        set: body,
      },
    };
    await this.service.updateFileInfo({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/fileContents")
  async disconnectFileContents(
    @common.Param() params: FileInfoWhereUniqueInput,
    @common.Body() body: FileContentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fileContents: {
        disconnect: body,
      },
    };
    await this.service.updateFileInfo({
      where: params,
      data,
      select: { id: true },
    });
  }
}
