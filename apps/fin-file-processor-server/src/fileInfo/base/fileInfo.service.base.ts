/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  FileInfo as PrismaFileInfo,
  CryptoInfo as PrismaCryptoInfo,
  FileContent as PrismaFileContent,
} from "@prisma/client";

export class FileInfoServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.FileInfoCountArgs, "select">): Promise<number> {
    return this.prisma.fileInfo.count(args);
  }

  async fileInfos(
    args: Prisma.FileInfoFindManyArgs
  ): Promise<PrismaFileInfo[]> {
    return this.prisma.fileInfo.findMany(args);
  }
  async fileInfo(
    args: Prisma.FileInfoFindUniqueArgs
  ): Promise<PrismaFileInfo | null> {
    return this.prisma.fileInfo.findUnique(args);
  }
  async createFileInfo(
    args: Prisma.FileInfoCreateArgs
  ): Promise<PrismaFileInfo> {
    return this.prisma.fileInfo.create(args);
  }
  async updateFileInfo(
    args: Prisma.FileInfoUpdateArgs
  ): Promise<PrismaFileInfo> {
    return this.prisma.fileInfo.update(args);
  }
  async deleteFileInfo(
    args: Prisma.FileInfoDeleteArgs
  ): Promise<PrismaFileInfo> {
    return this.prisma.fileInfo.delete(args);
  }

  async findCryptoInfos(
    parentId: string,
    args: Prisma.CryptoInfoFindManyArgs
  ): Promise<PrismaCryptoInfo[]> {
    return this.prisma.fileInfo
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .cryptoInfos(args);
  }

  async findFileContents(
    parentId: string,
    args: Prisma.FileContentFindManyArgs
  ): Promise<PrismaFileContent[]> {
    return this.prisma.fileInfo
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .fileContents(args);
  }
}
