/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FileInfo } from "./FileInfo";
import { FileInfoCountArgs } from "./FileInfoCountArgs";
import { FileInfoFindManyArgs } from "./FileInfoFindManyArgs";
import { FileInfoFindUniqueArgs } from "./FileInfoFindUniqueArgs";
import { CreateFileInfoArgs } from "./CreateFileInfoArgs";
import { UpdateFileInfoArgs } from "./UpdateFileInfoArgs";
import { DeleteFileInfoArgs } from "./DeleteFileInfoArgs";
import { CryptoInfoFindManyArgs } from "../../cryptoInfo/base/CryptoInfoFindManyArgs";
import { CryptoInfo } from "../../cryptoInfo/base/CryptoInfo";
import { FileContentFindManyArgs } from "../../fileContent/base/FileContentFindManyArgs";
import { FileContent } from "../../fileContent/base/FileContent";
import { FileInfoService } from "../fileInfo.service";
@graphql.Resolver(() => FileInfo)
export class FileInfoResolverBase {
  constructor(protected readonly service: FileInfoService) {}

  async _fileInfosMeta(
    @graphql.Args() args: FileInfoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FileInfo])
  async fileInfos(
    @graphql.Args() args: FileInfoFindManyArgs
  ): Promise<FileInfo[]> {
    return this.service.fileInfos(args);
  }

  @graphql.Query(() => FileInfo, { nullable: true })
  async fileInfo(
    @graphql.Args() args: FileInfoFindUniqueArgs
  ): Promise<FileInfo | null> {
    const result = await this.service.fileInfo(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FileInfo)
  async createFileInfo(
    @graphql.Args() args: CreateFileInfoArgs
  ): Promise<FileInfo> {
    return await this.service.createFileInfo({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => FileInfo)
  async updateFileInfo(
    @graphql.Args() args: UpdateFileInfoArgs
  ): Promise<FileInfo | null> {
    try {
      return await this.service.updateFileInfo({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FileInfo)
  async deleteFileInfo(
    @graphql.Args() args: DeleteFileInfoArgs
  ): Promise<FileInfo | null> {
    try {
      return await this.service.deleteFileInfo(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [CryptoInfo], { name: "cryptoInfos" })
  async findCryptoInfos(
    @graphql.Parent() parent: FileInfo,
    @graphql.Args() args: CryptoInfoFindManyArgs
  ): Promise<CryptoInfo[]> {
    const results = await this.service.findCryptoInfos(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [FileContent], { name: "fileContents" })
  async findFileContents(
    @graphql.Parent() parent: FileInfo,
    @graphql.Args() args: FileContentFindManyArgs
  ): Promise<FileContent[]> {
    const results = await this.service.findFileContents(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
