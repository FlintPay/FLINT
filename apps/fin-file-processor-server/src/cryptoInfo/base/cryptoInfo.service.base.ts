/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CryptoInfo as PrismaCryptoInfo,
  FileInfo as PrismaFileInfo,
} from "@prisma/client";

export class CryptoInfoServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CryptoInfoCountArgs, "select">
  ): Promise<number> {
    return this.prisma.cryptoInfo.count(args);
  }

  async cryptoInfos(
    args: Prisma.CryptoInfoFindManyArgs
  ): Promise<PrismaCryptoInfo[]> {
    return this.prisma.cryptoInfo.findMany(args);
  }
  async cryptoInfo(
    args: Prisma.CryptoInfoFindUniqueArgs
  ): Promise<PrismaCryptoInfo | null> {
    return this.prisma.cryptoInfo.findUnique(args);
  }
  async createCryptoInfo(
    args: Prisma.CryptoInfoCreateArgs
  ): Promise<PrismaCryptoInfo> {
    return this.prisma.cryptoInfo.create(args);
  }
  async updateCryptoInfo(
    args: Prisma.CryptoInfoUpdateArgs
  ): Promise<PrismaCryptoInfo> {
    return this.prisma.cryptoInfo.update(args);
  }
  async deleteCryptoInfo(
    args: Prisma.CryptoInfoDeleteArgs
  ): Promise<PrismaCryptoInfo> {
    return this.prisma.cryptoInfo.delete(args);
  }

  async getFileInfo(parentId: string): Promise<PrismaFileInfo | null> {
    return this.prisma.cryptoInfo
      .findUnique({
        where: { id: parentId },
      })
      .fileInfo();
  }
}
