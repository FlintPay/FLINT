/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CryptoInfoService } from "../cryptoInfo.service";
import { CryptoInfoCreateInput } from "./CryptoInfoCreateInput";
import { CryptoInfo } from "./CryptoInfo";
import { CryptoInfoFindManyArgs } from "./CryptoInfoFindManyArgs";
import { CryptoInfoWhereUniqueInput } from "./CryptoInfoWhereUniqueInput";
import { CryptoInfoUpdateInput } from "./CryptoInfoUpdateInput";

export class CryptoInfoControllerBase {
  constructor(protected readonly service: CryptoInfoService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CryptoInfo })
  async createCryptoInfo(
    @common.Body() data: CryptoInfoCreateInput
  ): Promise<CryptoInfo> {
    return await this.service.createCryptoInfo({
      data: {
        ...data,

        fileInfo: data.fileInfo
          ? {
              connect: data.fileInfo,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        encryptionType: true,

        fileInfo: {
          select: {
            id: true,
          },
        },

        id: true,
        isEncrypted: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CryptoInfo] })
  @ApiNestedQuery(CryptoInfoFindManyArgs)
  async cryptoInfos(@common.Req() request: Request): Promise<CryptoInfo[]> {
    const args = plainToClass(CryptoInfoFindManyArgs, request.query);
    return this.service.cryptoInfos({
      ...args,
      select: {
        createdAt: true,
        encryptionType: true,

        fileInfo: {
          select: {
            id: true,
          },
        },

        id: true,
        isEncrypted: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CryptoInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async cryptoInfo(
    @common.Param() params: CryptoInfoWhereUniqueInput
  ): Promise<CryptoInfo | null> {
    const result = await this.service.cryptoInfo({
      where: params,
      select: {
        createdAt: true,
        encryptionType: true,

        fileInfo: {
          select: {
            id: true,
          },
        },

        id: true,
        isEncrypted: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CryptoInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCryptoInfo(
    @common.Param() params: CryptoInfoWhereUniqueInput,
    @common.Body() data: CryptoInfoUpdateInput
  ): Promise<CryptoInfo | null> {
    try {
      return await this.service.updateCryptoInfo({
        where: params,
        data: {
          ...data,

          fileInfo: data.fileInfo
            ? {
                connect: data.fileInfo,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          encryptionType: true,

          fileInfo: {
            select: {
              id: true,
            },
          },

          id: true,
          isEncrypted: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CryptoInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCryptoInfo(
    @common.Param() params: CryptoInfoWhereUniqueInput
  ): Promise<CryptoInfo | null> {
    try {
      return await this.service.deleteCryptoInfo({
        where: params,
        select: {
          createdAt: true,
          encryptionType: true,

          fileInfo: {
            select: {
              id: true,
            },
          },

          id: true,
          isEncrypted: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
