/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CryptoInfo } from "./CryptoInfo";
import { CryptoInfoCountArgs } from "./CryptoInfoCountArgs";
import { CryptoInfoFindManyArgs } from "./CryptoInfoFindManyArgs";
import { CryptoInfoFindUniqueArgs } from "./CryptoInfoFindUniqueArgs";
import { CreateCryptoInfoArgs } from "./CreateCryptoInfoArgs";
import { UpdateCryptoInfoArgs } from "./UpdateCryptoInfoArgs";
import { DeleteCryptoInfoArgs } from "./DeleteCryptoInfoArgs";
import { FileInfo } from "../../fileInfo/base/FileInfo";
import { CryptoInfoService } from "../cryptoInfo.service";
@graphql.Resolver(() => CryptoInfo)
export class CryptoInfoResolverBase {
  constructor(protected readonly service: CryptoInfoService) {}

  async _cryptoInfosMeta(
    @graphql.Args() args: CryptoInfoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CryptoInfo])
  async cryptoInfos(
    @graphql.Args() args: CryptoInfoFindManyArgs
  ): Promise<CryptoInfo[]> {
    return this.service.cryptoInfos(args);
  }

  @graphql.Query(() => CryptoInfo, { nullable: true })
  async cryptoInfo(
    @graphql.Args() args: CryptoInfoFindUniqueArgs
  ): Promise<CryptoInfo | null> {
    const result = await this.service.cryptoInfo(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CryptoInfo)
  async createCryptoInfo(
    @graphql.Args() args: CreateCryptoInfoArgs
  ): Promise<CryptoInfo> {
    return await this.service.createCryptoInfo({
      ...args,
      data: {
        ...args.data,

        fileInfo: args.data.fileInfo
          ? {
              connect: args.data.fileInfo,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => CryptoInfo)
  async updateCryptoInfo(
    @graphql.Args() args: UpdateCryptoInfoArgs
  ): Promise<CryptoInfo | null> {
    try {
      return await this.service.updateCryptoInfo({
        ...args,
        data: {
          ...args.data,

          fileInfo: args.data.fileInfo
            ? {
                connect: args.data.fileInfo,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CryptoInfo)
  async deleteCryptoInfo(
    @graphql.Args() args: DeleteCryptoInfoArgs
  ): Promise<CryptoInfo | null> {
    try {
      return await this.service.deleteCryptoInfo(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => FileInfo, {
    nullable: true,
    name: "fileInfo",
  })
  async getFileInfo(
    @graphql.Parent() parent: CryptoInfo
  ): Promise<FileInfo | null> {
    const result = await this.service.getFileInfo(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
