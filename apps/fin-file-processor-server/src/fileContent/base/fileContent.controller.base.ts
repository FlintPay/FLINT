/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FileContentService } from "../fileContent.service";
import { FileContentCreateInput } from "./FileContentCreateInput";
import { FileContent } from "./FileContent";
import { FileContentFindManyArgs } from "./FileContentFindManyArgs";
import { FileContentWhereUniqueInput } from "./FileContentWhereUniqueInput";
import { FileContentUpdateInput } from "./FileContentUpdateInput";

export class FileContentControllerBase {
  constructor(protected readonly service: FileContentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FileContent })
  async createFileContent(
    @common.Body() data: FileContentCreateInput
  ): Promise<FileContent> {
    return await this.service.createFileContent({
      data: {
        ...data,

        fileInfo: data.fileInfo
          ? {
              connect: data.fileInfo,
            }
          : undefined,
      },
      select: {
        contentJson: true,
        createdAt: true,

        fileInfo: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FileContent] })
  @ApiNestedQuery(FileContentFindManyArgs)
  async fileContents(@common.Req() request: Request): Promise<FileContent[]> {
    const args = plainToClass(FileContentFindManyArgs, request.query);
    return this.service.fileContents({
      ...args,
      select: {
        contentJson: true,
        createdAt: true,

        fileInfo: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FileContent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async fileContent(
    @common.Param() params: FileContentWhereUniqueInput
  ): Promise<FileContent | null> {
    const result = await this.service.fileContent({
      where: params,
      select: {
        contentJson: true,
        createdAt: true,

        fileInfo: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FileContent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFileContent(
    @common.Param() params: FileContentWhereUniqueInput,
    @common.Body() data: FileContentUpdateInput
  ): Promise<FileContent | null> {
    try {
      return await this.service.updateFileContent({
        where: params,
        data: {
          ...data,

          fileInfo: data.fileInfo
            ? {
                connect: data.fileInfo,
              }
            : undefined,
        },
        select: {
          contentJson: true,
          createdAt: true,

          fileInfo: {
            select: {
              id: true,
            },
          },

          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FileContent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFileContent(
    @common.Param() params: FileContentWhereUniqueInput
  ): Promise<FileContent | null> {
    try {
      return await this.service.deleteFileContent({
        where: params,
        select: {
          contentJson: true,
          createdAt: true,

          fileInfo: {
            select: {
              id: true,
            },
          },

          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
