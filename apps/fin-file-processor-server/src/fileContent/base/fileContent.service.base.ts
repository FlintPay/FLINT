/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  FileContent as PrismaFileContent,
  FileInfo as PrismaFileInfo,
} from "@prisma/client";

export class FileContentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FileContentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.fileContent.count(args);
  }

  async fileContents(
    args: Prisma.FileContentFindManyArgs
  ): Promise<PrismaFileContent[]> {
    return this.prisma.fileContent.findMany(args);
  }
  async fileContent(
    args: Prisma.FileContentFindUniqueArgs
  ): Promise<PrismaFileContent | null> {
    return this.prisma.fileContent.findUnique(args);
  }
  async createFileContent(
    args: Prisma.FileContentCreateArgs
  ): Promise<PrismaFileContent> {
    return this.prisma.fileContent.create(args);
  }
  async updateFileContent(
    args: Prisma.FileContentUpdateArgs
  ): Promise<PrismaFileContent> {
    return this.prisma.fileContent.update(args);
  }
  async deleteFileContent(
    args: Prisma.FileContentDeleteArgs
  ): Promise<PrismaFileContent> {
    return this.prisma.fileContent.delete(args);
  }

  async getFileInfo(parentId: string): Promise<PrismaFileInfo | null> {
    return this.prisma.fileContent
      .findUnique({
        where: { id: parentId },
      })
      .fileInfo();
  }
}
